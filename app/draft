{-
------------
-- Matrix --
------------

data Matrix a = Matrix Int Int (VU.Vector a) deriving (Show, Eq)
data MMatrix pm a = MMatrix Int Int (VUM.MVector pm a)

-- | O(H * W) 行列の取得
matrix :: VU.Unbox a => (Int, Int) -> a -> Matrix a
matrix (!h, !w) = Matrix h w . VU.replicate (h * w)

-- | O(H * W)
mgenerate :: VUM.Unbox a =>
    (Int, Int) -> ((Int, Int) -> a) -> Matrix a
mgenerate (!h, !w) !f = Matrix h w $
    VU.generate (h * w) $ \x -> f (x `div` w, x `mod` w)

-- | O(1)
mindex :: VUM.Unbox a => Matrix a -> (Int, Int) ->  a
mindex (Matrix !h !w !v) (!i, !j)  = v VU.! (i * w + j)

-- | O(H * W)
mmnew :: (Prim.PrimMonad m, VU.Unbox a) =>
    (Int, Int) -> m (MMatrix (Prim.PrimState m) a)
mmnew (!h, !w) = MMatrix h w <$> VUM.new (h * w)

-- | O(1)
mmread :: (Prim.PrimMonad m, VU.Unbox a) =>
    MMatrix (Prim.PrimState m) a -> (Int, Int) -> m a
mmread (MMatrix _ !w !mv) (!i, !j) = VUM.read mv (i * w + j)

-- | O(1)
mmwrite :: (Prim.PrimMonad m, VU.Unbox a) =>
    MMatrix (Prim.PrimState m) a -> (Int, Int) -> a -> m ()
mmwrite (MMatrix _ !w !mv) (!i, !j) = VUM.write mv (i * w + j)

-- | O(H * W)
mmfreeze :: (VUM.Unbox a, Prim.PrimMonad m) =>
    MMatrix (Prim.PrimState m) a -> m (Matrix a)
mmfreeze (MMatrix !h !w !mv) = Matrix h w <$> VU.freeze mv
-}

--------------
-- DP(2DIM) --
--------------
{-
-- | O(H * W * O(f))
dp2 :: (Prim.PrimMonad m, VUM.Unbox a) => Int -> Int ->
    (MMatrix (Prim.PrimState m) a -> Int -> Int -> m a) -> m (Matrix a)
dp2 !h !w !f = do
    mm <- mmnew (h, w)
    Monad.forM_ [(x, y) | x <- [0 .. h - 1], y <- [0 .. w - 1]] $ \(i, j)-> do
        mmwrite mm (i, j) =<< f mm i j
    mmfreeze mm

-}
}

-----------
-- Queue --
-----------

data Queue pm a = Queue (VUM.MVector pm Int) (VUM.MVector pm a)

-- | O(N) Queueの作成
queue :: (PrimMonad m, VUM.Unbox a) =>
    Int -> a -> m (Queue (PrimState m) a)
queue n a = Queue <$> VU.thaw (VU.fromList [0, 0]) <*> VUM.replicate n a

-- | O(1)
qcons :: (PrimMonad m, VUM.Unbox a) =>
    Queue (PrimState m) a -> a -> m ()
qcons (Queue header buf) a = do
    x <- VUM.read header 0
    let newHead = (x - 1) `mod` VUM.length buf
    VUM.write header 0 newHead
    VUM.write buf newHead a

-- | O(1)
enqueue :: (PrimMonad m, VUM.Unbox a) =>
    Queue (PrimState m) a -> a -> m ()
enqueue (Queue header buf) a = do
    x <- VUM.read header 1
    VUM.write buf x a
    VUM.write header 1 $ (x + 1) `mod` VUM.length buf

-- | O(1)
dequeue :: (PrimMonad m, VUM.Unbox a) => Queue (PrimState m) a -> m a
dequeue (Queue header buf) = do
    x <- VUM.read header 0
    VUM.write header 0 $ (x + 1) `mod` VUM.length buf
    VUM.read buf x

-- | O(1)
qhead :: (PrimMonad m, VUM.Unbox a) => Queue (PrimState m) a -> m a
qhead (Queue header buf) = do
    x <- VUM.read header 0
    VUM.read buf x

-- | O(1)
qempty :: PrimMonad m => Queue (PrimState m) a -> m Bool
qempty (Queue header _) = (==) <$> VUM.read header 0 <*>  VUM.read header 1

-- | O(1)
qlength :: PrimMonad m => Queue (PrimState m) a -> m Int
qlength (Queue header _) = (-) <$> VUM.read header 1 <*>  VUM.read header 0

-----------
-- Graph --
-----------

newtype Graph = Graph (V.Vector [Int]) deriving (Show, Eq)

-- | O(|V| + |E|)? たぶん
graph :: Int -> VU.Vector (Int, Int) -> Graph
graph n edges = Graph $ V.modify (f edges) $ V.replicate n [] where
    f :: PrimMonad m => VU.Vector (Int, Int) ->
        VM.MVector (PrimState m) [Int] -> m ()
    f edges mv = VU.forM_ edges $ \edge ->
        VM.modify mv (snd edge:) $ fst edge

-- | O(|E|) bfs

bfs :: PrimMonad m => Graph -> Int -> m (V.Vector (Maybe Int))
bfs (Graph v) i = do
    visited <- VM.replicate (V.length v) Nothing
    q <- queue (V.length v) 0
    enqueue q i
    VM.write visited i (Just 0)
    while $ do
        x <- dequeue q
        dist <- Maybe.fromJust <$> VM.read visited x
        forM_ (v V.! x) $ \y -> do
            connectedDist <- VM.read visited y
            case connectedDist of
                Nothing -> do
                    enqueue q y
                    VM.write visited y . Just $ dist + 1
                _ -> return ()
        qempty q
    V.freeze visited
